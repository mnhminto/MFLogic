{-# OPTIONS -w -O0 #-}
{- |
Module      :  MFLogic/ATC_MFLogic.der.hs
Description :  generated ShATermConvertible instances
Copyright   :  (c) DFKI GmbH 2012
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(derive Typeable instances)

Automatic derivation of instances via DrIFT-rule ShATermConvertible
  for the type(s):
'MFLogic.AS_MFLogic.MF_BASIC_ITEM'
'MFLogic.AS_MFLogic.MF_SIG_ITEM'
'MFLogic.AS_MFLogic.MF_FORMULA'
'MFLogic.MFLogicSign.MFMap'
'MFLogic.MFLogicSign.SignExtMF'
'MFLogic.MFSymbol.MFSymbType'
'MFLogic.MFSymbol.MFSymbol'
-}

{-
Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
MFLogic/AS_MFLogic.hs
MFLogic/MFLogicSign.hs
MFLogic/MFSymbol.hs
-}

module MFLogic.ATC_MFLogic () where

import ATerm.Lib
import CASL.AS_Basic_CASL
import CASL.AS_Basic_CASL (SORT)
import CASL.ATC_CASL
import CASL.Sign
import Common.AS_Annotation
import Common.Doc
import Common.Doc (Doc, sepByCommas)
import Common.DocUtils
import Common.DocUtils (Pretty(..), printMap, pairElems)
import Common.Id
import Common.Keywords
import Data.Data
import Data.Either (partitionEithers)
import MFLogic.AS_MFLogic
import MFLogic.MFLogicSign
import MFLogic.MFSymbol
import qualified CASL.Morphism as Mor
import qualified CASL.Sign as CASLSign
import qualified Common.Lib.MapSet as MapSet
import qualified Common.Lib.Rel as Rel
import qualified Data.Map as Map
import qualified Data.Set as Set

{-! for MFLogic.AS_MFLogic.MF_BASIC_ITEM derive : ShATermConvertible !-}
{-! for MFLogic.AS_MFLogic.MF_SIG_ITEM derive : ShATermConvertible !-}
{-! for MFLogic.AS_MFLogic.MF_FORMULA derive : ShATermConvertible !-}
{-! for MFLogic.MFLogicSign.MFMap derive : ShATermConvertible !-}
{-! for MFLogic.MFLogicSign.SignExtMF derive : ShATermConvertible !-}
{-! for MFLogic.MFSymbol.MFSymbType derive : ShATermConvertible !-}
{-! for MFLogic.MFSymbol.MFSymbol derive : ShATermConvertible !-}
